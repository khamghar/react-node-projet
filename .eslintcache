[{"F:\\cda mango db\\react-blog-app\\src\\index.js":"1","F:\\cda mango db\\react-blog-app\\src\\reportWebVitals.js":"2","F:\\cda mango db\\react-blog-app\\src\\App.js":"3","F:\\cda mango db\\react-blog-app\\src\\components\\AuthContext\\index.js":"4","F:\\cda mango db\\react-blog-app\\src\\firebase.js":"5","F:\\cda mango db\\react-blog-app\\src\\components\\CreatePost.jsx":"6","F:\\cda mango db\\react-blog-app\\src\\components\\Login.jsx":"7","F:\\cda mango db\\react-blog-app\\src\\components\\Header.jsx":"8","F:\\cda mango db\\react-blog-app\\src\\components\\Posts.jsx":"9","F:\\cda mango db\\react-blog-app\\src\\components\\PostDetails.jsx":"10","F:\\cda mango db\\react-blog-app\\src\\components\\Search.jsx":"11","F:\\cda mango db\\react-blog-app\\src\\components\\Register.jsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1545,"mtime":1608419772978,"results":"16","hashOfConfig":"14"},{"size":108,"mtime":1608418730545,"results":"17","hashOfConfig":"14"},{"size":869,"mtime":1608512710767,"results":"18","hashOfConfig":"14"},{"size":2762,"mtime":1608430898145,"results":"19","hashOfConfig":"14"},{"size":1952,"mtime":1608337410265,"results":"20","hashOfConfig":"14"},{"size":8191,"mtime":1608514038038,"results":"21","hashOfConfig":"14"},{"size":3438,"mtime":1608511421230,"results":"22","hashOfConfig":"14"},{"size":4633,"mtime":1608419366779,"results":"23","hashOfConfig":"14"},{"size":974,"mtime":1608429062943,"results":"24","hashOfConfig":"14"},{"size":2418,"mtime":1608336090007,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jjxpuw",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"F:\\cda mango db\\react-blog-app\\src\\index.js",[],["57","58"],"F:\\cda mango db\\react-blog-app\\src\\reportWebVitals.js",[],"F:\\cda mango db\\react-blog-app\\src\\App.js",[],"F:\\cda mango db\\react-blog-app\\src\\components\\AuthContext\\index.js",[],"F:\\cda mango db\\react-blog-app\\src\\firebase.js",[],"F:\\cda mango db\\react-blog-app\\src\\components\\CreatePost.jsx",["59"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport {firebaseStorage} from '../firebase'\r\nimport AuthContext from './AuthContext'\r\n\r\nexport default function CreatePost(props) {\r\n  const [post, setPost] = useState({\r\n    title: \"\",\r\n    body: \"\",\r\n    image: \"\",\r\n  });\r\n\r\n  const [image, setImage] = useState(null)\r\n  const {authUser} = useContext(AuthContext)\r\n \r\n\r\n  useEffect(()=>{\r\n    if(!authUser)\r\n    props.history.push(\"/login\");\r\n  },[])\r\n\r\n\r\n  const handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(image)\r\n    handleImageUpload();\r\n  };\r\n\r\n  const handleImageUpload =()=>{\r\n    const uploadImage = firebaseStorage.ref(`images/${image.name}`).put(image);\r\n    uploadImage.on(\"state_changed\", snapshot =>{\r\n    console.log(\"uploading ...\")\r\n    },error =>{\r\n        console.log(error.message)\r\n    }, ()=>{\r\n        firebaseStorage.ref('images').child(image.name)\r\n        .getDownloadURL()\r\n        .then(url => {\r\n            const {title, body}= post;\r\n            const newPost={\r\n                title, \r\n                body,\r\n                image : url,\r\n                author : authUser.displayName,\r\n                vote_count:0,\r\n                comments: [],\r\n                created_at : Date.now()\r\n            }\r\n            firebase.collection(\"posts\").add(newPost);\r\n            props.history.push(\"/\");\r\n        })\r\n    })\r\n  }\r\n\r\n  const handleInputChange = event => {\r\n    setPost({\r\n      ...post,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleFileInput = event =>{\r\n      if(event.target.files[0])\r\n      {\r\n          const image = event.target.files[0];\r\n          setImage(image);\r\n\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h2 className=\"register-form-title\">Ajouter un Poste</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          required\r\n          className=\"form-control input\"\r\n          onChange={handleInputChange}\r\n          value={post.title}\r\n          placeholder=\"Titre\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <textarea\r\n          className=\"textarea\"\r\n          name=\"body\"\r\n          placeholder=\"Description ...\"\r\n          value={post.body}\r\n          onChange={handleInputChange}\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          name=\"image\"\r\n          required\r\n          className=\"form-control input\"\r\n          onChange={handleFileInput}\r\n        />\r\n        <div>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Valider\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","F:\\cda mango db\\react-blog-app\\src\\components\\Login.jsx",["60"],"import React, {useState} from 'react'\r\nimport {firebaseAuth} from '../firebase';\r\n\r\nfunction Login(props) {\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [user, setUser] = useState({\r\n        email: '',\r\n        password:''\r\n    })\r\n\r\n    const handleInputChange = event =>{\r\n        setUser({\r\n            ...user,[event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = event =>{\r\n        event.preventDefault();\r\n        setSubmitted(true);\r\n        login(user);\r\n        setUser({\r\n            email: '',\r\n            password: ''\r\n        })\r\n    }\r\n\r\n    const login =({email, password})=>{\r\n        const loggedUser = firebaseAuth.signInWithEmailAndPassword(email,password)\r\n        .then(userLogged => {\r\n\r\n            return userLogged;\r\n        })\r\n        console.log(loggedUser)\r\n        props.history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <h2 className=\"register-form-title\">Connexion</h2>\r\n                <form onSubmit={handleFormSubmit}>\r\n\r\n                    <input type=\"email\" name=\"email\"\r\n                    required className=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    value={user.email}\r\n                    placeholder=\"email\"\r\n                    autoComplete=\"off\"\r\n                    />\r\n\r\n                    <input type=\"password\" name=\"password\"\r\n                    required className=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    value={user.password}\r\n                    placeholder=\"Mot de passe\"\r\n                    autoComplete=\"off\"\r\n                    />\r\n                    <div>\r\n                        <button className=\"btn btn-primary\"\r\n                        type=\"submit\">Valider</button>\r\n                    </div>\r\n                </form>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","F:\\cda mango db\\react-blog-app\\src\\components\\Header.jsx",[],"F:\\cda mango db\\react-blog-app\\src\\components\\Posts.jsx",["61"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nfunction Posts() {\r\n  const [posts, setPosts] = useState([]);\r\n  const[show, setShow] = useState(3);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = getPosts();\r\n    return () =>{\r\n        unsubscribe();\r\n    }\r\n  }, []);\r\n\r\n  const getPosts = () => {\r\n    return firebase\r\n      .collection(\"posts\")\r\n      .orderBy(\"created_at\", \"desc\")\r\n      .onSnapshot(snapshot => {\r\n        //console.log(snapshot);\r\n        const posts = snapshot.docs.map(doc => {\r\n          return { id: doc.id, ...doc.data() };\r\n        });\r\n        //console.log(posts);\r\n         setPosts(posts);\r\n      });\r\n  };\r\n\r\n  const voteUp = postId => {\r\n    const myPost = firebase.collection(\"posts\").doc(postId);\r\n    myPost.get().then(doc => {\r\n      if (doc.exists) {\r\n        const previousCount = doc.data().vote_count;\r\n        myPost.update({ vote_count: previousCount + 1 });\r\n      }\r\n    });\r\n  };\r\n\r\n  const voteDown = postId => {\r\n    const myPost = firebase.collection(\"posts\").doc(postId);\r\n    myPost.get().then(doc => {\r\n      if (doc.exists) {\r\n        const previousCount = doc.data().vote_count;\r\n        myPost.update({ vote_count: previousCount - 1 });\r\n      }\r\n    });\r\n  };\r\n\r\n  const renderPosts = () => {\r\n    return (\r\n      posts &&\r\n      posts.slice(0, show).map((post, index) => (\r\n        <div key={index}>\r\n          <div className=\"post\">\r\n            <div className=\"post-image\">\r\n              <img src={post.image} alt=\"\" />\r\n            </div>\r\n            <div className=\"post-content\">\r\n              <Link to ={`/post/${post.id}`}>\r\n                <h3 className=\"post-title font-medium\">{post.title}</h3>\r\n              </Link>\r\n              <h5 className=\"post-details\">\r\n                <span className=\"posted-by font-semibold\">\r\n                  {post.author}\r\n                </span>\r\n                <span className=\"date font-bold\">\r\n                  {moment(post.created_at).local(\"fr\").fromNow()}\r\n                </span>\r\n              </h5>\r\n              <p className=\"post-body\">{post.body}</p>\r\n              <div className=\"votes\">\r\n                <div className=\"up\" onClick={() => voteUp(post.id)}>\r\n                  &#8593;\r\n                </div>\r\n                <div className=\"down\" onClick={() => voteDown(post.id)}>\r\n                  &#8595;\r\n                </div>\r\n                <div className=\"count\">{post.vote_count}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n            <hr className=\"line\"/>\r\n        </div>\r\n      ))\r\n    );\r\n  };\r\n\r\n  const renderTop = ()=>{\r\n    const topPosts = posts.sort(\r\n      (postone, postTwo) => postTwo.vote_count - postone.vote_count\r\n    );\r\n    return topPosts.map((post, index) =>{\r\n      return <Link key={index} to={`/post/${post.id}`}>\r\n      <h3 className=\"post-sidebar-title trendlink\">\r\n      {index +1}  \r\n      {\" \"}\r\n      {post.title}\r\n      </h3>  \r\n      </Link>\r\n    })\r\n  }\r\n\r\n  return(\r\n  <div className=\"main\">\r\n    <div className=\"main-content\">\r\n      <div className=\"posts\">{renderPosts()}</div>\r\n    </div>\r\n\r\n\r\n    <div className=\"sidebar\">\r\n        <h3 className=\"sidebar-title\">Tendences</h3>\r\n        <div className=\"sidebar-content\"> \r\n            {renderTop()}\r\n        </div>\r\n      </div>\r\n  </div>\r\n  ) \r\n}\r\n\r\nexport default Posts;\r\n","F:\\cda mango db\\react-blog-app\\src\\components\\PostDetails.jsx",["62"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport moment from \"moment\";\r\nimport AuthContext from \"./AuthContext\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction PostDetails(props) {\r\n  const [post, setPost] = useState([]);\r\n  const postId = props.match.params.postId;\r\n  const postRef = firebase.collection(\"posts\").doc(postId);\r\n  const [comment, setComment] = useState(\"\");\r\n  const { authUser} = useContext(AuthContext);\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n      postRef.get().then(doc =>{   // unmounted\r\n        if(isSubscribed){\r\n        setPost({...doc.data(), id: doc.id});\r\n      }\r\n  })\r\n    return () =>(isSubscribed=false); // ComponentwillUnmount()\r\n  }, [post, postRef]);\r\n\r\n  const getPost = () => {\r\n    postRef.get().then(doc => {\r\n      if (doc.exists) {\r\n        setPost({ ...doc.data(), id: doc.id });\r\n      }\r\n    });\r\n  };\r\n\r\n  const voteUp = postId => {\r\n    const myPost = firebase.collection(\"posts\").doc(postId);\r\n    myPost.get().then(doc => {\r\n      if (doc.exists) {\r\n        const previousCount = doc.data().vote_count;\r\n        myPost.update({ vote_count: previousCount + 1 });\r\n      }\r\n    });\r\n  };\r\n\r\n  const voteDown = postId => {\r\n    const myPost = firebase.collection(\"posts\").doc(postId);\r\n    myPost.get().then(doc => {\r\n      if (doc.exists) {\r\n        const previousCount = doc.data().vote_count;\r\n        myPost.update({ vote_count: previousCount - 1 });\r\n      }\r\n    });\r\n  };\r\n\r\n  const addComment = () => {\r\n    postRef.get().then(doc =>{\r\n      if(doc.exists){\r\n      const previousComment = doc.data().comments || [];\r\n      const commentText ={\r\n        postedBy :{id: \"336\", name: \"samadi\"},\r\n        created : Date.now(),\r\n        text : comment\r\n      }\r\n      const commentsUpdated = [...previousComment, commentText];\r\n      postRef.update({comments : commentsUpdated});\r\n      setPost(prevState =>({\r\n        ...prevState, comments : commentsUpdated\r\n      }))\r\n      setComment(\"\");\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n  const renderPost = () => {\r\n    return (\r\n      post && (\r\n        <div className=\"post-show\">\r\n          <div className=\"post-image-full\">\r\n            <img src={post.image} alt=\"\" />\r\n          </div>\r\n          <div className=\"post-content\">\r\n            <h3 className=\"post-title font-medium\">{post.title}</h3>\r\n            <h5 className=\"post-details\">\r\n              <span className=\"posted-by font-semibold\">{post.author}</span>\r\n              <span className=\"date font-bold\">\r\n                {moment(post.created_at).local(\"fr\").fromNow()}\r\n              </span>\r\n            </h5>\r\n            <p className=\"post-body\">{post.body}</p>\r\n            <div className=\"votes\">\r\n              <div className=\"up\" onClick={() => voteUp(post.id)}>\r\n                &#8593;\r\n              </div>\r\n              <div className=\"down\" onClick={() => voteDown(post.id)}>\r\n                &#8595;\r\n              </div>\r\n              <div className=\"count\">{post.vote_count}</div>\r\n            </div>     \r\n              {\r\n                authUser ?(\r\n                <>\r\n                <textarea\r\n                  className=\"textarea\"\r\n                  placeholder=\"Commentaires\"\r\n                  value={comment}\r\n                  onChange={event => setComment(event.target.value)}\r\n                  cols=\"30\"\r\n                  rows=\"10\"\r\n                />\r\n              <div>\r\n                <button className=\"btn btn-primary\" onClick={() => addComment()}>\r\n                  Ajouter\r\n                </button>\r\n              </div>\r\n                </>\r\n                ):(\r\n                <>\r\n                <Link to=\"/Login\" className=\"comment-title\" >\r\n                  Vous devez vous connecter pour pouvoir commenter\r\n                </Link>\r\n              </>\r\n                )}\r\n            <div className=\"comments font-bold \">\r\n              <h3>Commentaires {post.comments && post.comments.length}</h3>\r\n            </div>\r\n            {post.comments &&\r\n              post.comments.map((comment, index) => (\r\n                <div key={index}>\r\n                  <p className=\"comment-author\">\r\n                    {post.author } |{\" \"}\r\n                    {moment(comment.created)\r\n                      .local(\"fr\")\r\n                      .format(\"MMMM Do YYYY, h:mm a\")} | {\" \"}\r\n                      \r\n                  </p>\r\n                  <p className=\"comments\">{comment.text}</p>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  return renderPost();\r\n}\r\n\r\nexport default PostDetails;\r\n","F:\\cda mango db\\react-blog-app\\src\\components\\Search.jsx",["63","64","65","66","67"],"import React, {useState} from 'react'\r\nimport firebase from '../firebase'\r\nimport {Link}  from 'react-router-dom'\r\nimport moment from \"moment\";\r\n\r\n function Search() {\r\n    const [posts, setPosts] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const handleSearchChange = event =>{\r\n        setSearch(event.traget.value)\r\n    }\r\n\r\n    const handleFormSubmit = event =>{\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div class=\"form-container\">\r\n            <h2 className=\"register-form-title\">Recherche</h2>\r\n            <form onSubmit={handleFormSubmit}>\r\n            <input type=\"search\"\r\n            className=\"form-control\"\r\n            placeholder=\"Recherche ... \"\r\n            value={search}\r\n            onChange={handleSearchChange}/>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Rechercher</button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","F:\\cda mango db\\react-blog-app\\src\\components\\Register.jsx",["68"],"import React, {useState} from 'react'\r\nimport {firebaseAuth} from '../firebase';\r\n\r\nfunction Register(props) {\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [user, setUser] = useState({\r\n        name : '',\r\n        email: '',\r\n        password:''\r\n    })\r\n\r\n    const handleInputChange = event =>{\r\n        setUser({\r\n            ...user,[event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = event =>{\r\n        event.preventDefault();\r\n        setSubmitted(true);\r\n        register(user);\r\n        setUser({\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        })\r\n    }\r\n\r\n    const register =({name, email, password})=>{\r\n        const newUser = firebaseAuth.createUserWithEmailAndPassword(email,password)\r\n        .then(userCreated => {\r\n            userCreated.user.updateProfile({\r\n                displayName:name\r\n            })\r\n            return userCreated;\r\n        })\r\n        console.log(newUser)\r\n        props.history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <h2 className=\"register-form-title\">Inscription</h2>\r\n                <form onSubmit={handleFormSubmit}>\r\n                    <input type=\"text\" name=\"name\"\r\n                    required className=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    value={user.name}\r\n                    placeholder=\"Nom & Prénom\"\r\n                    autoComplete=\"off\"\r\n                    />\r\n\r\n                    <input type=\"email\" name=\"email\"\r\n                    required className=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    value={user.email}\r\n                    placeholder=\"email\"\r\n                    autoComplete=\"off\"\r\n                    />\r\n\r\n                    <input type=\"password\" name=\"password\"\r\n                    required className=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    value={user.password}\r\n                    placeholder=\"Mot de passe\"\r\n                    autoComplete=\"off\"\r\n                    />\r\n                    <div>\r\n                        <button className=\"btn btn-primary\"\r\n                        type=\"submit\">Valider</button>\r\n                    </div>\r\n                </form>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":20,"column":5,"nodeType":"75","endLine":20,"endColumn":7,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":5,"column":12,"nodeType":"79","messageId":"80","endLine":5,"endColumn":21},{"ruleId":"77","severity":1,"message":"81","line":8,"column":15,"nodeType":"79","messageId":"80","endLine":8,"endColumn":22},{"ruleId":"77","severity":1,"message":"82","line":24,"column":9,"nodeType":"79","messageId":"80","endLine":24,"endColumn":16},{"ruleId":"77","severity":1,"message":"83","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":16},{"ruleId":"77","severity":1,"message":"84","line":3,"column":9,"nodeType":"79","messageId":"80","endLine":3,"endColumn":13},{"ruleId":"77","severity":1,"message":"85","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":14},{"ruleId":"77","severity":1,"message":"86","line":7,"column":12,"nodeType":"79","messageId":"80","endLine":7,"endColumn":17},{"ruleId":"77","severity":1,"message":"87","line":7,"column":19,"nodeType":"79","messageId":"80","endLine":7,"endColumn":27},{"ruleId":"77","severity":1,"message":"78","line":5,"column":12,"nodeType":"79","messageId":"80","endLine":5,"endColumn":21},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authUser' and 'props.history'. Either include them or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'submitted' is assigned a value but never used.","Identifier","unusedVar","'setShow' is assigned a value but never used.","'getPost' is assigned a value but never used.","'firebase' is defined but never used.","'Link' is defined but never used.","'moment' is defined but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [authUser, props.history]",{"range":"93","text":"94"},[501,503],"[authUser, props.history]"]